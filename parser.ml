type token =
  | SEMI
  | COLASN
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | BAR
  | PRIME
  | NEG
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | POW
  | EQ
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | ASN
  | BOOL
  | INT
  | FLOAT
  | CHAR
  | STRING
  | INTARR
  | FLOATARR
  | FUNC
  | EQUA
  | IF
  | ELSE
  | NOELSE
  | FOR
  | RETURN
  | TYPEOF
  | PRINT
  | INT2FLOAT
  | FLOAT2INT
  | CEIL
  | FLOOR
  | METER
  | SEC
  | KGRAM
  | AMP
  | CMETER
  | HERTZ
  | GRAM
  | NEWTON
  | NOUNIT
  | SIZEOF
  | APPEND
  | ITOF
  | FTOI
  | ID of (string)
  | UID of (string)
  | UONE of (string)
  | INT_LITERAL of (int)
  | FLOAT_LITERAL of (float)
  | CHAR_LITERAL of (char)
  | STRING_LITERAL of (string)
  | BOOL_LITERAL of (bool)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 79 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* COLASN *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* LBRACE *);
  265 (* RBRACE *);
  266 (* BAR *);
  267 (* PRIME *);
  268 (* NEG *);
  269 (* NOT *);
  270 (* PLUS *);
  271 (* MINUS *);
  272 (* TIMES *);
  273 (* DIVIDE *);
  274 (* POW *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* GT *);
  279 (* LEQ *);
  280 (* GEQ *);
  281 (* TRUE *);
  282 (* FALSE *);
  283 (* AND *);
  284 (* OR *);
  285 (* ASN *);
  286 (* BOOL *);
  287 (* INT *);
  288 (* FLOAT *);
  289 (* CHAR *);
  290 (* STRING *);
  291 (* INTARR *);
  292 (* FLOATARR *);
  293 (* FUNC *);
  294 (* EQUA *);
  295 (* IF *);
  296 (* ELSE *);
  297 (* NOELSE *);
  298 (* FOR *);
  299 (* RETURN *);
  300 (* TYPEOF *);
  301 (* PRINT *);
  302 (* INT2FLOAT *);
  303 (* FLOAT2INT *);
  304 (* CEIL *);
  305 (* FLOOR *);
  306 (* METER *);
  307 (* SEC *);
  308 (* KGRAM *);
  309 (* AMP *);
  310 (* CMETER *);
  311 (* HERTZ *);
  312 (* GRAM *);
  313 (* NEWTON *);
  314 (* NOUNIT *);
  315 (* SIZEOF *);
  316 (* APPEND *);
  317 (* ITOF *);
  318 (* FTOI *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  319 (* ID *);
  320 (* UID *);
  321 (* UONE *);
  322 (* INT_LITERAL *);
  323 (* FLOAT_LITERAL *);
  324 (* CHAR_LITERAL *);
  325 (* STRING_LITERAL *);
  326 (* BOOL_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\007\000\007\000\007\000\007\000\007\000\009\000\008\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\004\000\
\005\000\005\000\012\000\014\000\014\000\015\000\015\000\015\000\
\015\000\013\000\016\000\016\000\017\000\017\000\017\000\017\000\
\017\000\017\000\019\000\019\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\021\000\024\000\024\000\025\000\025\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\023\000\
\023\000\023\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\006\000\026\000\026\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\002\000\004\000\003\000\
\001\000\001\000\001\000\001\000\001\000\003\000\004\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\007\000\
\006\000\005\000\003\000\000\000\001\000\003\000\002\000\005\000\
\004\000\003\000\000\000\002\000\002\000\003\000\005\000\007\000\
\009\000\005\000\000\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\003\000\011\000\004\000\005\000\
\005\000\004\000\006\000\004\000\004\000\004\000\006\000\004\000\
\004\000\004\000\004\000\003\000\000\000\001\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\002\000\001\000\
\001\000\006\000\000\000\003\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\125\000\000\000\000\000\013\000\009\000\010\000\
\011\000\012\000\000\000\001\000\003\000\004\000\005\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\017\000\018\000\
\019\000\021\000\020\000\022\000\023\000\025\000\024\000\000\000\
\026\000\000\000\000\000\007\000\000\000\039\000\000\000\035\000\
\000\000\119\000\117\000\118\000\000\000\000\000\000\000\015\000\
\000\000\000\000\000\000\043\000\034\000\000\000\000\000\038\000\
\000\000\114\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\029\000\030\000\000\000\033\000\032\000\
\041\000\000\000\000\000\000\000\000\000\000\000\124\000\000\000\
\000\000\042\000\000\000\000\000\000\000\058\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\054\000\055\000\056\000\057\000\
\000\000\000\000\044\000\000\000\040\000\000\000\000\000\075\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\077\000\000\000\000\000\000\000\046\000\000\000\
\000\000\104\000\105\000\106\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\086\000\000\000\090\000\091\000\085\000\000\000\088\000\
\089\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\000\000\000\000\050\000\102\000\103\000\097\000\098\000\099\000\
\100\000\101\000\000\000\000\000\000\000\095\000\000\000\000\000\
\081\000\000\000\000\000\000\000\087\000\083\000\092\000\000\000\
\000\000\000\000\112\000\113\000\000\000\048\000\000\000\096\000\
\000\000\000\000\000\000\000\000\000\000\000\000\110\000\000\000\
\000\000\000\000\000\000\109\000\049\000\000\000\078\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\014\000\015\000\016\000\121\000\023\000\
\122\000\048\000\049\000\026\000\069\000\034\000\035\000\086\000\
\123\000\124\000\133\000\002\001\214\000\227\000\173\000\231\000\
\232\000\061\000\062\000"

let yysindex = "\005\000\
\000\000\000\000\000\000\001\000\000\255\000\000\000\000\000\000\
\000\000\000\000\206\254\000\000\000\000\000\000\000\000\000\000\
\020\255\019\255\012\255\040\255\243\254\096\255\223\254\034\255\
\091\000\102\255\055\000\012\255\000\000\061\255\124\255\131\255\
\015\255\147\255\140\255\217\255\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\000\000\153\255\012\255\000\000\145\255\000\000\104\255\000\000\
\091\000\000\000\000\000\000\000\167\255\245\255\088\255\000\000\
\055\000\055\000\231\254\000\000\000\000\153\255\177\255\000\000\
\022\255\000\000\217\255\217\255\217\255\217\255\217\255\217\255\
\000\000\191\255\191\255\000\000\000\000\069\255\000\000\000\000\
\000\000\122\255\178\255\178\255\194\255\194\255\000\000\128\000\
\032\000\000\000\203\255\032\000\032\000\000\000\000\000\219\255\
\232\255\032\000\242\255\243\255\251\255\252\255\006\000\013\000\
\025\000\037\000\016\255\000\000\000\000\000\000\000\000\000\000\
\009\255\023\255\000\000\160\000\000\000\089\001\017\000\000\000\
\000\000\032\000\032\000\144\001\008\000\241\255\032\000\233\255\
\233\255\253\255\254\255\233\255\233\255\154\255\032\000\220\255\
\027\000\004\000\039\000\016\000\000\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\000\000\033\000\109\001\095\000\000\000\099\000\
\129\001\000\000\000\000\000\000\113\000\133\000\142\000\100\000\
\143\000\144\000\155\000\144\001\000\000\032\000\141\000\166\000\
\157\000\036\000\036\000\153\000\153\000\000\000\195\001\195\001\
\151\000\151\000\151\000\151\000\184\001\170\001\164\000\209\255\
\032\000\000\000\188\000\000\000\000\000\000\000\090\255\000\000\
\000\000\161\000\144\001\032\000\090\255\000\000\166\000\162\000\
\152\000\184\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\189\000\090\255\144\001\000\000\186\000\192\000\
\000\000\014\255\209\255\032\000\000\000\000\000\000\000\090\255\
\014\255\032\000\000\000\000\000\098\000\000\000\191\000\000\000\
\157\255\155\001\008\255\014\255\014\255\209\255\000\000\014\255\
\187\000\196\000\196\000\000\000\000\000\209\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\211\000\212\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\212\255\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\112\255\235\255\216\255\066\001\000\000\217\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\216\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\112\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\216\000\086\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\091\255\000\000\000\000\000\000\000\000\
\000\000\000\001\011\001\208\000\232\000\000\000\027\255\183\255\
\050\000\035\001\045\001\069\001\188\255\048\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\136\000\118\255\000\000\213\000\000\000\000\000\000\000\
\138\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\144\255\000\000\000\000\227\000\
\000\000\000\000\000\000\214\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\174\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\117\255\221\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\255\255\223\255\
\000\000\226\255\000\000\249\255\148\001\000\000\000\000\000\000\
\073\255\164\255\127\255\169\255\023\001\053\255\165\000\000\000\
\000\000\000\000\010\001"

let yytablesize = 731
let yytable = "\055\000\
\012\000\166\000\017\000\030\000\126\000\001\000\063\000\128\000\
\129\000\230\000\018\000\241\000\019\000\132\000\144\000\025\000\
\217\000\241\000\020\000\020\000\050\000\142\000\242\000\033\000\
\238\000\020\000\024\000\066\000\242\000\031\000\020\000\066\000\
\020\000\020\000\082\000\083\000\248\000\165\000\132\000\090\000\
\084\000\085\000\169\000\070\000\143\000\066\000\066\000\027\000\
\073\000\028\000\180\000\246\000\073\000\066\000\066\000\073\000\
\021\000\186\000\187\000\188\000\189\000\190\000\191\000\192\000\
\193\000\194\000\195\000\196\000\197\000\198\000\005\001\145\000\
\097\000\243\000\244\000\073\000\098\000\054\000\099\000\243\000\
\244\000\100\000\022\000\101\000\089\000\147\000\052\000\146\000\
\148\000\211\000\052\000\076\000\081\000\102\000\103\000\076\000\
\029\000\032\000\006\000\007\000\008\000\009\000\010\000\065\000\
\066\000\067\000\247\000\104\000\218\000\036\000\105\000\106\000\
\107\000\108\000\220\000\221\000\109\000\110\000\079\000\229\000\
\120\000\107\000\079\000\051\000\052\000\120\000\120\000\111\000\
\112\000\113\000\114\000\115\000\107\000\107\000\116\000\117\000\
\118\000\119\000\120\000\053\000\120\000\047\000\057\000\132\000\
\080\000\047\000\245\000\047\000\080\000\250\000\047\000\056\000\
\047\000\249\000\071\000\222\000\223\000\224\000\225\000\226\000\
\068\000\255\000\047\000\047\000\003\001\004\001\072\000\047\000\
\047\000\047\000\047\000\047\000\000\001\252\000\253\000\074\000\
\047\000\088\000\111\000\047\000\047\000\047\000\047\000\067\000\
\125\000\047\000\047\000\067\000\072\000\111\000\111\000\111\000\
\072\000\077\000\078\000\079\000\047\000\047\000\047\000\047\000\
\047\000\067\000\067\000\047\000\047\000\047\000\047\000\047\000\
\067\000\067\000\067\000\079\000\097\000\127\000\072\000\072\000\
\027\000\001\001\099\000\179\000\027\000\100\000\130\000\101\000\
\122\000\108\000\181\000\027\000\027\000\122\000\122\000\122\000\
\122\000\102\000\103\000\131\000\108\000\108\000\006\000\007\000\
\008\000\009\000\010\000\121\000\122\000\134\000\135\000\104\000\
\121\000\121\000\105\000\106\000\107\000\108\000\136\000\137\000\
\109\000\110\000\075\000\076\000\077\000\078\000\079\000\121\000\
\167\000\138\000\005\000\111\000\112\000\113\000\114\000\115\000\
\139\000\080\000\116\000\117\000\118\000\119\000\120\000\058\000\
\164\000\028\000\059\000\060\000\140\000\028\000\006\000\007\000\
\008\000\009\000\010\000\097\000\028\000\028\000\011\000\170\000\
\141\000\099\000\171\000\172\000\100\000\174\000\101\000\168\000\
\177\000\178\000\068\000\152\000\153\000\154\000\068\000\182\000\
\102\000\103\000\037\000\175\000\176\000\006\000\007\000\008\000\
\009\000\010\000\183\000\184\000\068\000\068\000\068\000\068\000\
\068\000\068\000\064\000\107\000\068\000\068\000\185\000\109\000\
\110\000\065\000\066\000\067\000\091\000\092\000\093\000\094\000\
\095\000\096\000\111\000\112\000\113\000\114\000\115\000\201\000\
\199\000\116\000\117\000\118\000\119\000\120\000\207\000\202\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\060\000\251\000\252\000\253\000\060\000\204\000\046\000\047\000\
\006\000\007\000\008\000\009\000\010\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\084\000\205\000\060\000\060\000\084\000\075\000\076\000\077\000\
\078\000\079\000\206\000\208\000\209\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\149\000\210\000\084\000\084\000\150\000\151\000\152\000\153\000\
\154\000\212\000\154\000\213\000\216\000\150\000\151\000\152\000\
\153\000\154\000\155\000\156\000\157\000\158\000\159\000\160\000\
\236\000\215\000\161\000\162\000\219\000\228\000\234\000\235\000\
\239\000\237\000\240\000\254\000\006\001\150\000\151\000\152\000\
\153\000\154\000\155\000\156\000\157\000\158\000\159\000\160\000\
\063\000\007\001\161\000\162\000\063\000\253\000\036\000\037\000\
\051\000\087\000\051\000\093\000\115\000\063\000\063\000\063\000\
\063\000\116\000\063\000\063\000\063\000\063\000\063\000\063\000\
\064\000\094\000\063\000\063\000\064\000\233\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\064\000\064\000\064\000\
\064\000\000\000\064\000\064\000\064\000\064\000\064\000\064\000\
\061\000\000\000\064\000\064\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\000\000\000\061\000\061\000\062\000\
\000\000\000\000\061\000\061\000\061\000\061\000\061\000\061\000\
\062\000\062\000\061\000\061\000\000\000\062\000\062\000\062\000\
\062\000\062\000\062\000\070\000\000\000\062\000\062\000\070\000\
\000\000\000\000\000\000\000\000\000\000\069\000\000\000\000\000\
\000\000\069\000\000\000\000\000\000\000\070\000\070\000\070\000\
\070\000\070\000\070\000\000\000\000\000\070\000\070\000\069\000\
\069\000\069\000\069\000\069\000\069\000\071\000\000\000\069\000\
\069\000\071\000\123\000\000\000\000\000\000\000\000\000\123\000\
\123\000\123\000\123\000\000\000\000\000\000\000\000\000\071\000\
\071\000\071\000\071\000\071\000\071\000\163\000\123\000\071\000\
\071\000\000\000\000\000\000\000\000\000\000\000\150\000\151\000\
\152\000\153\000\154\000\155\000\156\000\157\000\158\000\159\000\
\160\000\200\000\000\000\161\000\162\000\000\000\000\000\000\000\
\000\000\000\000\150\000\151\000\152\000\153\000\154\000\155\000\
\156\000\157\000\158\000\159\000\160\000\203\000\000\000\161\000\
\162\000\000\000\000\000\000\000\000\000\000\000\150\000\151\000\
\152\000\153\000\154\000\155\000\156\000\157\000\158\000\159\000\
\160\000\000\000\000\000\161\000\162\000\150\000\151\000\152\000\
\153\000\154\000\155\000\156\000\157\000\158\000\159\000\160\000\
\150\000\151\000\161\000\162\000\000\000\155\000\156\000\157\000\
\158\000\159\000\160\000\000\000\000\000\161\000\162\000\150\000\
\151\000\152\000\153\000\154\000\155\000\156\000\157\000\158\000\
\159\000\160\000\000\000\000\000\161\000\150\000\151\000\152\000\
\153\000\154\000\155\000\156\000\157\000\158\000\159\000\160\000\
\150\000\151\000\152\000\153\000\154\000\000\000\000\000\157\000\
\158\000\159\000\160\000"

let yycheck = "\033\000\
\000\000\131\000\004\000\037\001\097\000\001\000\037\000\100\000\
\101\000\213\000\011\001\004\001\063\001\106\000\006\001\004\001\
\200\000\004\001\011\001\011\001\028\000\006\001\015\001\025\000\
\228\000\011\001\008\001\001\001\015\001\063\001\011\001\005\001\
\011\001\011\001\065\000\066\000\240\000\130\000\131\000\073\000\
\066\001\067\001\135\000\051\000\029\001\019\001\020\001\008\001\
\001\001\063\001\143\000\235\000\005\001\027\001\028\001\057\000\
\037\001\150\000\151\000\152\000\153\000\154\000\155\000\156\000\
\157\000\158\000\159\000\160\000\161\000\162\000\254\000\063\001\
\004\001\066\001\067\001\028\001\008\001\063\001\010\001\066\001\
\067\001\013\001\063\001\015\001\063\001\063\001\001\001\121\000\
\122\000\182\000\005\001\001\001\005\001\025\001\026\001\005\001\
\001\001\064\001\030\001\031\001\032\001\033\001\034\001\016\001\
\017\001\018\001\236\000\039\001\201\000\008\001\042\001\043\001\
\044\001\045\001\025\001\026\001\048\001\049\001\001\001\212\000\
\009\001\005\001\005\001\063\001\001\001\014\001\015\001\059\001\
\060\001\061\001\062\001\063\001\016\001\017\001\066\001\067\001\
\068\001\069\001\070\001\009\001\029\001\004\001\003\001\236\000\
\001\001\008\001\234\000\010\001\005\001\242\000\013\001\005\001\
\015\001\241\000\010\001\066\001\067\001\068\001\069\001\070\001\
\008\001\005\001\025\001\026\001\252\000\253\000\063\001\030\001\
\031\001\032\001\033\001\034\001\016\001\017\001\018\001\009\001\
\039\001\001\001\005\001\042\001\043\001\044\001\045\001\001\001\
\063\001\048\001\049\001\005\001\001\001\016\001\017\001\018\001\
\005\001\016\001\017\001\018\001\059\001\060\001\061\001\062\001\
\063\001\019\001\020\001\066\001\067\001\068\001\069\001\070\001\
\018\001\027\001\028\001\018\001\004\001\011\001\027\001\028\001\
\005\001\251\000\010\001\066\001\009\001\013\001\004\001\015\001\
\009\001\005\001\007\001\016\001\017\001\014\001\015\001\016\001\
\017\001\025\001\026\001\004\001\016\001\017\001\030\001\031\001\
\032\001\033\001\034\001\009\001\029\001\004\001\004\001\039\001\
\014\001\015\001\042\001\043\001\044\001\045\001\004\001\004\001\
\048\001\049\001\014\001\015\001\016\001\017\001\018\001\029\001\
\001\001\004\001\010\001\059\001\060\001\061\001\062\001\063\001\
\004\001\029\001\066\001\067\001\068\001\069\001\070\001\063\001\
\008\001\005\001\066\001\067\001\004\001\009\001\030\001\031\001\
\032\001\033\001\034\001\004\001\016\001\017\001\038\001\063\001\
\004\001\010\001\066\001\067\001\013\001\137\000\015\001\063\001\
\140\000\141\000\001\001\016\001\017\001\018\001\005\001\029\001\
\025\001\026\001\004\001\063\001\063\001\030\001\031\001\032\001\
\033\001\034\001\063\001\029\001\019\001\020\001\021\001\022\001\
\023\001\024\001\009\001\044\001\027\001\028\001\063\001\048\001\
\049\001\016\001\017\001\018\001\075\000\076\000\077\000\078\000\
\079\000\080\000\059\001\060\001\061\001\062\001\063\001\001\001\
\064\001\066\001\067\001\068\001\069\001\070\001\003\001\005\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\001\001\016\001\017\001\018\001\005\001\005\001\064\001\065\001\
\030\001\031\001\032\001\033\001\034\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\001\001\005\001\027\001\028\001\005\001\014\001\015\001\016\001\
\017\001\018\001\005\001\005\001\005\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\001\001\007\001\027\001\028\001\014\001\015\001\016\001\017\001\
\018\001\029\001\018\001\006\001\009\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\001\001\029\001\027\001\028\001\001\001\029\001\029\001\040\001\
\007\001\005\001\003\001\005\001\010\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\001\001\001\001\027\001\028\001\005\001\018\001\005\001\005\001\
\001\001\070\000\005\001\007\001\009\001\014\001\015\001\016\001\
\017\001\009\001\019\001\020\001\021\001\022\001\023\001\024\001\
\001\001\007\001\027\001\028\001\005\001\215\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\001\001\255\255\027\001\028\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\255\255\014\001\015\001\005\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\014\001\015\001\027\001\028\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\001\001\255\255\027\001\028\001\005\001\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\255\255\
\255\255\005\001\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\027\001\028\001\019\001\
\020\001\021\001\022\001\023\001\024\001\001\001\255\255\027\001\
\028\001\005\001\009\001\255\255\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\005\001\029\001\027\001\
\028\001\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\005\001\255\255\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\005\001\255\255\027\001\
\028\001\255\255\255\255\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\028\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\014\001\015\001\027\001\028\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\027\001\028\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\027\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\022\001\023\001\024\001"

let yynames_const = "\
  SEMI\000\
  COLASN\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  BAR\000\
  PRIME\000\
  NEG\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  POW\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  ASN\000\
  BOOL\000\
  INT\000\
  FLOAT\000\
  CHAR\000\
  STRING\000\
  INTARR\000\
  FLOATARR\000\
  FUNC\000\
  EQUA\000\
  IF\000\
  ELSE\000\
  NOELSE\000\
  FOR\000\
  RETURN\000\
  TYPEOF\000\
  PRINT\000\
  INT2FLOAT\000\
  FLOAT2INT\000\
  CEIL\000\
  FLOOR\000\
  METER\000\
  SEC\000\
  KGRAM\000\
  AMP\000\
  CMETER\000\
  HERTZ\000\
  GRAM\000\
  NEWTON\000\
  NOUNIT\000\
  SIZEOF\000\
  APPEND\000\
  ITOF\000\
  FTOI\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  UID\000\
  UONE\000\
  INT_LITERAL\000\
  FLOAT_LITERAL\000\
  CHAR_LITERAL\000\
  STRING_LITERAL\000\
  BOOL_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 53 "parser.mly"
             ( _1 )
# 583 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                   ( {vars=[]; units=[]; funcs=[]; equas=[];} )
# 589 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 57 "parser.mly"
                    ({
                  vars = _2 :: _1.vars;
						units = _1.units;
						funcs = _1.funcs;
						equas = _1.equas;
                  })
# 602 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unit_decl) in
    Obj.repr(
# 63 "parser.mly"
                     ({
                  vars = _1.vars;
                  units = _2 :: _1.units;
                  funcs = _1.funcs;
                  equas = _1.equas;
  					})
# 615 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 69 "parser.mly"
                     ({vars = _1.vars;
						units = _1.units;
						funcs = _2 :: _1.funcs;
						equas = _1.equas;})
# 626 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'equa_decl) in
    Obj.repr(
# 73 "parser.mly"
                     ({
						vars = _1.vars;
						units = _1.units;
						funcs = _1.funcs;
						equas = _2 :: _1.equas;
  					})
# 639 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 83 "parser.mly"
                    ((_1, _2, _3))
# 648 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 85 "parser.mly"
                 ( (_1, NOUNIT, _2) )
# 656 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
           ( Int   )
# 662 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
           ( Float )
# 668 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
           ( Char  )
# 674 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
           ( String)
# 680 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
           ( Bool  )
# 686 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 95 "parser.mly"
                      ( ArrayType(_1) )
# 693 "parser.ml"
               : 'lst_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'uexpr) in
    Obj.repr(
# 98 "parser.mly"
                           ( _3 )
# 700 "parser.ml"
               : 'unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
         ( Meter )
# 706 "parser.ml"
               : 'bi_unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
           ( Second )
# 712 "parser.ml"
               : 'bi_unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
             ( Kilogram )
# 718 "parser.ml"
               : 'bi_unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
             ( Ampere )
# 724 "parser.ml"
               : 'bi_unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
           ( Hertz )
# 730 "parser.ml"
               : 'bi_unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
             ( Centimeter )
# 736 "parser.ml"
               : 'bi_unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
             ( Gram )
# 742 "parser.ml"
               : 'bi_unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
             ( Newton )
# 748 "parser.ml"
               : 'bi_unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "parser.mly"
              ( _1 )
# 755 "parser.ml"
               : 'uexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
              ( Uid(_1) )
# 762 "parser.ml"
               : 'uexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bi_unit) in
    Obj.repr(
# 113 "parser.mly"
                  ( Uid(_1) )
# 769 "parser.ml"
               : 'uexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'uexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'uexpr) in
    Obj.repr(
# 114 "parser.mly"
                        ( Binop(_1, UMult, _3) )
# 777 "parser.ml"
               : 'uexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'uexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'uexpr) in
    Obj.repr(
# 115 "parser.mly"
                         ( Binop(_1, UDiv, _3) )
# 785 "parser.ml"
               : 'uexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'uexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 116 "parser.mly"
                           ( Binop(_1, UPow, _3) )
# 793 "parser.ml"
               : 'uexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'uexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 117 "parser.mly"
                             ( Binop(_1, UPow, _3) )
# 801 "parser.ml"
               : 'uexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'uexpr) in
    Obj.repr(
# 118 "parser.mly"
                          ( _2 )
# 808 "parser.ml"
               : 'uexpr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 128 "parser.mly"
                                        ((_4))
# 815 "parser.ml"
               : 'unit_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'formals_block) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 134 "parser.mly"
                                             ({
      return_type       = _1;
		return_unit       = _2;
		func_identifier   = _4;
		func_formals      = List.rev _5;
		func_stmts        = List.rev _6
   })
# 832 "parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'formals_block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 141 "parser.mly"
                                         ({
      return_type       = _1;
		return_unit		   = NOUNIT;
		func_identifier   = _3;
		func_formals      = List.rev _4;
		func_stmts        = List.rev _5
   })
# 848 "parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_formals) in
    Obj.repr(
# 152 "parser.mly"
                             ( _2 )
# 855 "parser.ml"
               : 'formals_block))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
                 ([])
# 861 "parser.ml"
               : 'opt_formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formals_list) in
    Obj.repr(
# 159 "parser.mly"
                  (List.rev _1 )
# 868 "parser.ml"
               : 'opt_formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "parser.mly"
               ( [(_1, _2, _3)] )
# 877 "parser.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 164 "parser.mly"
            ( [(_1, _2)] )
# 885 "parser.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'formals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'unit) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 165 "parser.mly"
                                    ( (_3, _4, _5) :: _1 )
# 895 "parser.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 166 "parser.mly"
                               ( (_3, _4) :: _1 )
# 904 "parser.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 170 "parser.mly"
                           ( Block(List.rev _2) )
# 911 "parser.ml"
               : 'stmt_block))
; (fun __caml_parser_env ->
    Obj.repr(
# 174 "parser.mly"
   ( [] )
# 917 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 175 "parser.mly"
                    ( _2 :: _1 )
# 925 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
             (Expr _1)
# 932 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 179 "parser.mly"
                                    (Return _2)
# 939 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 180 "parser.mly"
                                           ( If(_3, _5, Block([])) )
# 947 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 181 "parser.mly"
                                             ( If(_3, _5, _7)        )
# 956 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 183 "parser.mly"
                                             ( For(_3, _5, _7, _9)   )
# 966 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                                   (Print(_3))
# 973 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "parser.mly"
                  ( Noexpr )
# 979 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
                   ( _1 )
# 986 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 192 "parser.mly"
                        ( Lit(IntLit(_1)) )
# 993 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 193 "parser.mly"
                           ( Lit(FloatLit(_1)) )
# 1000 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 194 "parser.mly"
                         ( Lit(CharLit(_1)) )
# 1007 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 195 "parser.mly"
                          ( Lit(StringLit(_1)) )
# 1014 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 196 "parser.mly"
                         ( Lit(BoolLit(_1)) )
# 1021 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "parser.mly"
                     ( BoolLit(true) )
# 1027 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 198 "parser.mly"
                     ( BoolLit(false) )
# 1033 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 199 "parser.mly"
                    ( Id(_1) )
# 1040 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 200 "parser.mly"
                          ( Binop(_1, Add, _3) )
# 1048 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 201 "parser.mly"
                          ( Binop(_1, Sub, _3) )
# 1056 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 202 "parser.mly"
                          ( Binop(_1, Mult, _3) )
# 1064 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 203 "parser.mly"
                           ( Binop(_1, Div, _3) )
# 1072 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 204 "parser.mly"
                         ( Binop(_1, Pow, _3) )
# 1080 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 205 "parser.mly"
                         ( Binop(_1, Equal, _3) )
# 1088 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 206 "parser.mly"
                         ( Binop(_1, Neq, _3) )
# 1096 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 207 "parser.mly"
                         ( Binop(_1, Less, _3) )
# 1104 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 208 "parser.mly"
                         ( Binop(_1, Leq, _3) )
# 1112 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 209 "parser.mly"
                         ( Binop(_1, Greater, _3) )
# 1120 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 210 "parser.mly"
                         ( Binop(_1, Geq, _3) )
# 1128 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 211 "parser.mly"
                         ( Binop(_1, And, _3) )
# 1136 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 212 "parser.mly"
                         ( Binop(_1, Or, _3) )
# 1144 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 213 "parser.mly"
                               ( Unop(Neg, _2) )
# 1151 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 214 "parser.mly"
                      ( Unop(Not, _2) )
# 1158 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 215 "parser.mly"
                       ( Assign(_1, _3) )
# 1166 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 216 "parser.mly"
                             ( _2 )
# 1173 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'cexpr) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'unit) in
    Obj.repr(
# 218 "parser.mly"
                                                               (UnitAssign(_4, _7, _9))
# 1182 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 220 "parser.mly"
                                       ( Init_Assign(_1,_2,_4) )
# 1191 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 222 "parser.mly"
                                       (Init_Assign_Unit(_1, _2, _3, _5))
# 1201 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lst_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lst_block) in
    Obj.repr(
# 227 "parser.mly"
                                             (ListInitUnit(_1, _2, _3, _5))
# 1211 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lst_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lst_block) in
    Obj.repr(
# 228 "parser.mly"
                                             (ListInit(_1, _2, _4))
# 1220 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prime) in
    Obj.repr(
# 231 "parser.mly"
                                             ( ListEleAssign(_1, _3, _6) )
# 1229 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 234 "parser.mly"
                                  (ListAccess(_1, _3))
# 1237 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 236 "parser.mly"
                             (SizeOf(_3))
# 1244 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 238 "parser.mly"
                             (TypeOf(_3))
# 1251 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'prime) in
    Obj.repr(
# 240 "parser.mly"
                                         (Append(_3, _5))
# 1259 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'primewithid) in
    Obj.repr(
# 242 "parser.mly"
                                    ( ItoF(_3) )
# 1266 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'primewithid) in
    Obj.repr(
# 244 "parser.mly"
                                    ( FtoI(_3) )
# 1273 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'primewithid) in
    Obj.repr(
# 245 "parser.mly"
                                    ( Ceil(_3) )
# 1280 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'primewithid) in
    Obj.repr(
# 246 "parser.mly"
                                     ( Floor(_3) )
# 1287 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_lst) in
    Obj.repr(
# 252 "parser.mly"
                        (_2)
# 1294 "parser.ml"
               : 'lst_block))
; (fun __caml_parser_env ->
    Obj.repr(
# 255 "parser.mly"
   ([])
# 1300 "parser.ml"
               : 'opt_lst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lst) in
    Obj.repr(
# 256 "parser.mly"
         (_1)
# 1307 "parser.ml"
               : 'opt_lst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prime) in
    Obj.repr(
# 259 "parser.mly"
         ([_1])
# 1314 "parser.ml"
               : 'lst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lst) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prime) in
    Obj.repr(
# 260 "parser.mly"
                     (_3 :: _1)
# 1322 "parser.ml"
               : 'lst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 263 "parser.mly"
                           ( Lit(IntLit(_1)) )
# 1329 "parser.ml"
               : 'prime))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 264 "parser.mly"
                           ( Lit(FloatLit(_1)) )
# 1336 "parser.ml"
               : 'prime))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 265 "parser.mly"
                         ( Lit(CharLit(_1)) )
# 1343 "parser.ml"
               : 'prime))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 266 "parser.mly"
                          ( Lit(StringLit(_1)) )
# 1350 "parser.ml"
               : 'prime))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 267 "parser.mly"
                         ( Lit(BoolLit(_1)) )
# 1357 "parser.ml"
               : 'prime))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "parser.mly"
                     ( BoolLit(true) )
# 1363 "parser.ml"
               : 'prime))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "parser.mly"
                     ( BoolLit(false) )
# 1369 "parser.ml"
               : 'prime))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 272 "parser.mly"
      (Id(_1))
# 1376 "parser.ml"
               : 'primewithid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 273 "parser.mly"
                          ( Lit(IntLit(_1)) )
# 1383 "parser.ml"
               : 'primewithid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 274 "parser.mly"
                           ( Lit(FloatLit(_1)) )
# 1390 "parser.ml"
               : 'primewithid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexpr) in
    Obj.repr(
# 277 "parser.mly"
                      ( Binop(_1, Mul, _3) )
# 1398 "parser.ml"
               : 'cexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexpr) in
    Obj.repr(
# 278 "parser.mly"
                        ( Binop(_1, Div, _3) )
# 1406 "parser.ml"
               : 'cexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cexpr) in
    Obj.repr(
# 279 "parser.mly"
                     ( Binop(_1, Pow, _3) )
# 1414 "parser.ml"
               : 'cexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cexpr) in
    Obj.repr(
# 280 "parser.mly"
                        ( _2 )
# 1421 "parser.ml"
               : 'cexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 281 "parser.mly"
                         ( Unop(Neg, _2) )
# 1428 "parser.ml"
               : 'cexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 282 "parser.mly"
                   ( Lit(IntLit(_1)) )
# 1435 "parser.ml"
               : 'cexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 283 "parser.mly"
                    ( Lit(FloatLit(_1)) )
# 1442 "parser.ml"
               : 'cexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'formals_block) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'equa_stmt) in
    Obj.repr(
# 290 "parser.mly"
   ({
      equa_identifier = _2;
      equa_formals = List.rev _3;
      equa_stmt = _5; 
   })
# 1455 "parser.ml"
               : 'equa_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 297 "parser.mly"
   ( [] )
# 1461 "parser.ml"
               : 'equa_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equa_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equa_expr) in
    Obj.repr(
# 299 "parser.mly"
                             ( equa(_1, _3))
# 1469 "parser.ml"
               : 'equa_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 302 "parser.mly"
                        ( Lit(IntLit(_1)) )
# 1476 "parser.ml"
               : 'equa_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 303 "parser.mly"
                           ( Lit(FloatLit(_1)) )
# 1483 "parser.ml"
               : 'equa_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 304 "parser.mly"
                      ( Id(_1) )
# 1490 "parser.ml"
               : 'equa_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equa_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equa_expr) in
    Obj.repr(
# 305 "parser.mly"
                                    ( Binop(_1, Add, _3) )
# 1498 "parser.ml"
               : 'equa_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equa_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equa_expr) in
    Obj.repr(
# 306 "parser.mly"
                                    ( Binop(_1, Sub, _3) )
# 1506 "parser.ml"
               : 'equa_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equa_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equa_expr) in
    Obj.repr(
# 307 "parser.mly"
                                    ( Binop(_1, Mult, _3) )
# 1514 "parser.ml"
               : 'equa_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equa_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equa_expr) in
    Obj.repr(
# 308 "parser.mly"
                                     ( Binop(_1, Div, _3) )
# 1522 "parser.ml"
               : 'equa_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equa_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equa_expr) in
    Obj.repr(
# 309 "parser.mly"
                                   ( Binop(_1, Pow, _3) )
# 1530 "parser.ml"
               : 'equa_expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
