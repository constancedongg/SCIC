### Starting build.
# Target: scic.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:scic.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules scic.ml > scic.ml.depends # cached
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules ast.ml > ast.ml.depends
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules codegen.ml > codegen.ml.depends
# Target: ast.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o ast.cmo ast.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o ast.cmo ast.ml
File "ast.ml", lines 47-59, characters 19-14:
47 | ...................function
48 |     Add -> "+"
49 |   | Sub -> "-"
50 |   | Mult -> "*"
51 |   | Div -> "/"
...
56 |   | Greater -> ">"
57 |   | Geq -> ">="
58 |   | And -> "&&"
59 |   | Or -> "||"
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Pow
File "ast.ml", line 70, characters 11-14:
70 |   | CharLit(l) -> "a"
                ^^^
Warning 27: unused variable l.
# Target: sast.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:sast.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules sast.ml > sast.ml.depends
# Target: sast.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o sast.cmo sast.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o sast.cmo sast.ml
File "sast.ml", line 44, characters 12-15:
44 |   | SCharLit(l) -> "a"
                 ^^^
Warning 27: unused variable l.
# Target: parser.mly, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet, traverse }
ocamlyacc parser.mly
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules parser.mli > parser.mli.depends
# Target: scanner.mll, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet, traverse }
ocamllex.opt -q scanner.mll
# Target: scanner.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:scanner.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules scanner.ml > scanner.ml.depends
# Target: parser.cmi, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o parser.cmi parser.mli
# Target: semant.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:semant.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules semant.ml > semant.ml.depends
# Target: codegen.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o codegen.cmo codegen.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o codegen.cmo codegen.ml
File "codegen.ml", lines 130-143, characters 3-4:
130 | ...(match op with 
131 | 	    A.Add     -> L.build_fadd
132 | 	  | A.Sub     -> L.build_fsub
133 | 	  | A.Mult    -> L.build_fmul
134 | 	  | A.Div     -> L.build_fdiv 
...
140 | 	  | A.Geq     -> L.build_fcmp L.Fcmp.Oge
141 | 	  | A.And | A.Or ->
142 | 	      raise (Failure "internal error: semant should have rejected and/or on float")
143 | 	  )......................
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Pow
File "codegen.ml", lines 147-160, characters 3-4:
147 | ...(match op with
148 | 	    A.Add     -> L.build_add
149 | 	  | A.Sub     -> L.build_sub
150 | 	  | A.Mult    -> L.build_mul
151 |     | A.Div     -> L.build_sdiv
...
157 | 	  | A.Leq     -> L.build_icmp L.Icmp.Sle
158 | 	  | A.Greater -> L.build_icmp L.Icmp.Sgt
159 | 	  | A.Geq     -> L.build_icmp L.Icmp.Sge
160 | 	  )......................
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Pow
File "codegen.ml", lines 197-220, characters 27-35:
197 | ...........................function
198 | 	SBlock sl -> List.fold_left stmt builder sl
199 |       | SExpr e -> ignore(expr builder e); builder 
200 |       | SReturn e -> ignore(match fdecl.sreturn_type with
201 |                               (* Special "return nothing" instr *)
...
217 | 	   build_br_merge;
218 | 
219 | 	 ignore(L.build_cond_br bool_val then_bb else_bb builder);
220 | 	 L.builder_at_end context merge_bb
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
SFor (_, _, _, _)
# Target: scanner.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o scanner.cmo scanner.ml
# Target: semant.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o semant.cmo semant.ml
# Target: scic.cmo, tags: { package(llvm), package(llvm.analysis), warn(+a-4), byte, compile, extension:cmo, extension:ml, file:scic.cmo, file:scic.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w +a-4 -package llvm -package llvm.analysis -o scic.cmo scic.ml
# Target: ast.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o ast.cmx ast.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o ast.cmx ast.ml
File "ast.ml", lines 47-59, characters 19-14:
47 | ...................function
48 |     Add -> "+"
49 |   | Sub -> "-"
50 |   | Mult -> "*"
51 |   | Div -> "/"
...
56 |   | Greater -> ">"
57 |   | Geq -> ">="
58 |   | And -> "&&"
59 |   | Or -> "||"
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Pow
File "ast.ml", line 70, characters 11-14:
70 |   | CharLit(l) -> "a"
                ^^^
Warning 27: unused variable l.
# Target: sast.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:sast.cmx, file:sast.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o sast.cmx sast.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o sast.cmx sast.ml
File "sast.ml", line 44, characters 12-15:
44 |   | SCharLit(l) -> "a"
                 ^^^
Warning 27: unused variable l.
# Target: parser.ml.depends, tags: { package(llvm), package(llvm.analysis), warn(+a-4), extension:ml, file:parser.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package llvm.analysis -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o parser.cmx parser.ml
# Target: codegen.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o codegen.cmx codegen.ml
+ ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o codegen.cmx codegen.ml
File "codegen.ml", lines 130-143, characters 3-4:
130 | ...(match op with 
131 | 	    A.Add     -> L.build_fadd
132 | 	  | A.Sub     -> L.build_fsub
133 | 	  | A.Mult    -> L.build_fmul
134 | 	  | A.Div     -> L.build_fdiv 
...
140 | 	  | A.Geq     -> L.build_fcmp L.Fcmp.Oge
141 | 	  | A.And | A.Or ->
142 | 	      raise (Failure "internal error: semant should have rejected and/or on float")
143 | 	  )......................
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Pow
File "codegen.ml", lines 147-160, characters 3-4:
147 | ...(match op with
148 | 	    A.Add     -> L.build_add
149 | 	  | A.Sub     -> L.build_sub
150 | 	  | A.Mult    -> L.build_mul
151 |     | A.Div     -> L.build_sdiv
...
157 | 	  | A.Leq     -> L.build_icmp L.Icmp.Sle
158 | 	  | A.Greater -> L.build_icmp L.Icmp.Sgt
159 | 	  | A.Geq     -> L.build_icmp L.Icmp.Sge
160 | 	  )......................
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Pow
File "codegen.ml", lines 197-220, characters 27-35:
197 | ...........................function
198 | 	SBlock sl -> List.fold_left stmt builder sl
199 |       | SExpr e -> ignore(expr builder e); builder 
200 |       | SReturn e -> ignore(match fdecl.sreturn_type with
201 |                               (* Special "return nothing" instr *)
...
217 | 	   build_br_merge;
218 | 
219 | 	 ignore(L.build_cond_br bool_val then_bb else_bb builder);
220 | 	 L.builder_at_end context merge_bb
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
SFor (_, _, _, _)
# Target: scanner.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:scanner.cmx, file:scanner.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o scanner.cmx scanner.ml
# Target: semant.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:semant.cmx, file:semant.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o semant.cmx semant.ml
# Target: scic.cmx, tags: { package(llvm), package(llvm.analysis), warn(+a-4), compile, extension:cmx, extension:ml, file:scic.cmx, file:scic.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w +a-4 -package llvm -package llvm.analysis -o scic.cmx scic.ml
# Target: scic.native, tags: { package(llvm), package(llvm.analysis), warn(+a-4), dont_link_with, extension:native, file:scic.native, link, native, ocaml, program, quiet, traverse }
ocamlfind ocamlopt -linkpkg -package llvm -package llvm.analysis ast.cmx sast.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx scic.cmx -o scic.native
# Compilation successful.
